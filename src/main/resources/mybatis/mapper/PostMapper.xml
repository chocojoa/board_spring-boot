<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.lollipop.board.post.mapper.PostMapper">

    <!-- 게시글 개수 조회 -->
    <select id="selectPostCount" parameterType="postParam" resultType="java.lang.Integer">
        SELECT COUNT(p.id) AS totalCount
          FROM `post` p
         INNER JOIN `USER` u ON p.created_by = u.id
         WHERE p.category_id = #{categoryId}
        <if test="title != null and title != ''">
           AND p.title LIKE CONCAT('%', #{title}, '%')
        </if>
        <if test="author != null and author != ''">
           AND u.user_name LIKE CONCAT('%', #{author}, '%')
        </if>
        <if test="startCreatedDate != null and startCreatedDate != ''">
           AND p.created_at > #{startCreatedDate}
        </if>
        <if test="endCreatedDate != null and endCreatedDate != ''">
           AND p.created_at <![CDATA[<]]> DATE_ADD(#{endCreatedDate}, INTERVAL 1 DAY)
        </if>
    </select>

    <!-- 게시글 목록 조회 -->
    <select id="selectPostList" parameterType="postParam" resultType="postDTO">
        SELECT *
          FROM (
                SELECT ROW_NUMBER() OVER(PARTITION BY p.category_id ORDER BY p.created_at, p.id) AS rowNumber
                     , p.category_id        AS categoryId
                     , p.id                 AS postId
                     , p.title              AS title
                     , p.view_count         AS viewCount
                     , pc.comment_count     AS commentCount
                     , u.id                 AS userId
                     , u.user_name          AS author
                     , DATE_FORMAT(p.created_at, '%Y-%m-%d') AS createdDate
                  FROM `post` p
                 INNER JOIN `user` u ON p.created_by = u.id
                  LEFT JOIN (
                             SELECT post_id AS post_id
                                  , COUNT(post_id) AS comment_count
                               FROM `post_comment`
                              GROUP BY post_id
                             ) pc ON p.id = pc.post_id
                 WHERE p.category_id = #{categoryId}
                <if test="title != null and title != ''">
                   AND p.title LIKE CONCAT('%', #{title}, '%')
                </if>
                <if test="author != null and author != ''">
                   AND u.user_name LIKE CONCAT('%' #{author}, '%')
                </if>
                <if test="startCreatedDate != null and startCreatedDate != ''">
                   AND p.created_at > #{startCreatedDate}
                </if>
                <if test="endCreatedDate != null and endCreatedDate != ''">
                   AND p.created_at <![CDATA[<]]> DATE_ADD(#{endCreatedDate}, INTERVAL 1 DAY)
                </if>
                ) A
        <if test="sortColumn != null">
            ORDER BY ${sortColumn} ${sortDirection}
        </if>
        <if test="pageSize > 0">
            LIMIT #{startIndex}, #{pageSize}
        </if>
    </select>

    <!-- 게시글 정보 조회 -->
    <select id="selectPost" parameterType="postParam" resultType="postDTO">
        SELECT p.id             AS postId
             , p.category_id    AS categoryId
             , p.title          AS title
             , p.content        AS content
             , p.view_count     AS viewCount
             , u.user_name      AS author
             , DATE_FORMAT(p.created_at, '%Y-%m-%d %H:%i')  AS createdDate
          FROM `post` p
         INNER JOIN `USER` u ON p.created_by = u.id
         WHERE p.category_id = #{categoryId}
           AND p.id = #{postId}
    </select>

    <!-- 게시글 정보 저장 -->
    <insert id="insertPost" parameterType="postDTO" useGeneratedKeys="true" keyProperty="postId">
        INSERT INTO `post` (
                  category_id
                , title
                , content
                , view_count
                , created_by
                , created_at
            ) VALUES (
                  #{categoryId}
                , #{title}
                , #{content}
                , 0
                , #{userId}
                , NOW()
            )
    </insert>

    <!-- 게시글 정보 수정 -->
    <update id="updatePost" parameterType="postDTO">
        UPDATE `post`
        <set>
            <if test="title != null and title != ''">
                title = #{title},
            </if>
            <if test="content != null and content != ''">
                content = #{content},
            </if>
            modified_by = #{userId},
            modified_at = NOW()
        </set>
        WHERE category_id = #{categoryId}
          AND id = #{postId}
    </update>

    <!-- 게시글 조회수 수정 -->
    <update id="updateViewCount" parameterType="postDTO">
        UPDATE `post`
           SET view_count = view_count + 1
         WHERE category_id = #{categoryId}
           AND id = #{postId}
    </update>

    <!-- 댓글 목록 조회 -->
    <select id="selectCommentList" parameterType="postParam" resultType="commentDTO">
        WITH RECURSIVE cte AS (
            SELECT pc.id AS comment_id
                 , pc.content
                 , pc.parent_comment_id
                 , pc.post_id
                 , pc.created_by
                 , pc.created_at
                 , 0 AS step
                 , CAST(LPAD(pc.id, 8, '0') AS CHAR(200)) AS sort_index
              FROM `post_comment` pc
             WHERE pc.parent_comment_id = 0
               AND pc.post_id = #{postId}
             UNION ALL
            SELECT pc2.id AS comment_id
                 , pc2.content
                 , pc2.parent_comment_id
                 , pc2.post_id
                 , pc2.created_by
                 , pc2.created_at
                 , cte.step + 1 AS step
                 , CONCAT(cte.sort_index, ',', LPAD(pc2.id, 8, '0')) AS sort_index
              FROM `post_comment` pc2
             INNER JOIN `cte` cte ON pc2.parent_comment_id = cte.comment_id
             WHERE pc2.post_id = #{postId}
        )
        SELECT c.comment_id         AS commentId
             , c.content            AS content
             , c.parent_comment_id  AS parentCommentId
             , c.step               AS step
             , c.post_id            AS postId
             , u.user_name          AS author
             , u.email              AS email
             , DATE_FORMAT(c.created_at, '%Y-%m-%d %H:%i')  AS createdDate
          FROM cte c
          LEFT JOIN `user` u ON c.created_by = u.id
         ORDER BY c.sort_index
    </select>

    <!-- 댓글 정보 저장 -->
    <insert id="insertComment" parameterType="commentDTO">
        INSERT INTO `post_comment` (
                  content
                , parent_comment_id
                , post_id
                , created_by
                , created_at
            ) VALUES (
                  #{content}
                , #{parentCommentId}
                , #{postId}
                , #{userId}
                , NOW()
            )
    </insert>

</mapper>